/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaNanoSerenade;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author aliay
 */
public class SearchMesocosmsForm extends javax.swing.JFrame {
    MY_CONNECTION my_connection = new MY_CONNECTION();
    MESOCOSM mesocosm = new MESOCOSM();
    /**
     * Creates new form ManageRoomsForm
     */
    public SearchMesocosmsForm() {
        
        
        
        initComponents();
        
        
        
         //ajout d une icone serende pour la page
          this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/lloogg_ser.png")).getImage());
        
          
          
            
        //populate the jtable
       // mesocosm.fillMesocosmJTable(jTable1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonClearCheckboxes = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonPrintResults = new javax.swing.JButton();
        jButtonExportResults = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxFields = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jComboBoxMT = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabelTap = new javax.swing.JLabel();
        jTextFieldSearch = new javax.swing.JTextField();
        jButtonValidateSearch = new javax.swing.JButton();
        jLabelLowerB = new javax.swing.JLabel();
        jLabelHigherB = new javax.swing.JLabel();
        jTextFieldLowerB = new javax.swing.JTextField();
        jTextFieldHigherB = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu4 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advanced Search Mesocosms (SERENADE)");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        )
        //make the jtable cell not editable
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jTable1.setGridColor(new java.awt.Color(204, 255, 0));

    jTable1.setSelectionBackground(new java.awt.Color(0, 153, 0));

    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            //jTable1MouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTable1);

    jButtonClearCheckboxes.setBackground(new java.awt.Color(204, 204, 204));
    jButtonClearCheckboxes.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
    jButtonClearCheckboxes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/reset_button.png"))); // NOI18N
    jButtonClearCheckboxes.setBorderPainted(false);
    jButtonClearCheckboxes.setContentAreaFilled(false);
    jButtonClearCheckboxes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButtonClearCheckboxes.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonClearCheckboxesActionPerformed(evt);
        }
    });

    jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/exit_button.png"))); // NOI18N
    jButton1.setBorderPainted(false);
    jButton1.setContentAreaFilled(false);
    jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton1.setDefaultCapable(false);
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButtonPrintResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/print_button_1.png"))); // NOI18N
    jButtonPrintResults.setBorderPainted(false);
    jButtonPrintResults.setContentAreaFilled(false);
    jButtonPrintResults.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

    jButtonExportResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/EXP8button.png"))); // NOI18N
    jButtonExportResults.setBorderPainted(false);
    jButtonExportResults.setContentAreaFilled(false);
    jButtonExportResults.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

    jPanel13.setBackground(new java.awt.Color(204, 204, 204));
    jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Search fields", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

    jLabel10.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabel10.setForeground(new java.awt.Color(102, 102, 102));
    jLabel10.setText("Select Field (s): ");

    jComboBoxFields.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All fields", "doi", "Total_time", "Total_dose", "Injection_mode", "Ecosystem", "Nanoparticle", "PH", "Temperature", "Conductivity", "Dissolved_oxygen", "ORP_water", "ORP_sediment", "Concentration_water", "Concentration_sediment", "Dissolved_concentration", "TBARS", "TAOC", "Algae", "Bateria", " " }));
    jComboBoxFields.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jComboBoxFieldsActionPerformed(evt);
        }
    });

    jLabel14.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabel14.setForeground(new java.awt.Color(102, 102, 102));
    jLabel14.setText("at ");

    jComboBoxMT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All measure times", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

    jLabel15.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabel15.setForeground(new java.awt.Color(102, 102, 102));
    jLabel15.setText("Measure time: ");

    jLabelTap.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabelTap.setForeground(new java.awt.Color(102, 102, 102));
    jLabelTap.setText("Tap keywords:");

    jTextFieldSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jTextFieldSearchActionPerformed(evt);
        }
    });

    jButtonValidateSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/search_button.png"))); // NOI18N
    jButtonValidateSearch.setBorderPainted(false);
    jButtonValidateSearch.setContentAreaFilled(false);
    jButtonValidateSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButtonValidateSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonValidateSearchActionPerformed(evt);
        }
    });

    jLabelLowerB.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabelLowerB.setForeground(new java.awt.Color(102, 102, 102));
    jLabelLowerB.setText("Lower bound:");

    jLabelHigherB.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabelHigherB.setForeground(new java.awt.Color(102, 102, 102));
    jLabelHigherB.setText("Higher bound:");

    javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
    jPanel13.setLayout(jPanel13Layout);
    jPanel13Layout.setHorizontalGroup(
        jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel13Layout.createSequentialGroup()
            .addGap(29, 29, 29)
            .addComponent(jLabel10)
            .addGap(10, 10, 10)
            .addComponent(jComboBoxFields, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(20, 20, 20)
            .addComponent(jLabelTap)
            .addGap(10, 10, 10)
            .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(20, 20, 20)
            .addComponent(jLabelLowerB)
            .addGap(10, 10, 10)
            .addComponent(jTextFieldLowerB, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel13Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(jLabelHigherB)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jTextFieldHigherB, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel14)
                    .addGap(20, 20, 20)
                    .addComponent(jLabel15)
                    .addGap(10, 10, 10)
                    .addComponent(jComboBoxMT, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(25, 25, 25))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                    .addGap(360, 360, 360)
                    .addComponent(jButtonValidateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())))
    );
    jPanel13Layout.setVerticalGroup(
        jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel13Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel10)
                .addComponent(jComboBoxFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel14)
                .addComponent(jComboBoxMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel15)
                .addComponent(jLabelTap)
                .addComponent(jTextFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabelLowerB)
                .addComponent(jLabelHigherB)
                .addComponent(jTextFieldLowerB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextFieldHigherB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
            .addComponent(jButtonValidateSearch)
            .addGap(8, 8, 8))
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(131, 131, 131)
                            .addComponent(jButtonClearCheckboxes, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(127, 127, 127)
                            .addComponent(jButtonExportResults, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(137, 137, 137)
                            .addComponent(jButtonPrintResults, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(125, 125, 125)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1232, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 28, Short.MAX_VALUE))
                .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(33, 33, 33)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jButtonClearCheckboxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonExportResults)
                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jButtonPrintResults, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(196, Short.MAX_VALUE))
    );

    jMenu1.setText("File");
    jMenuBar1.add(jMenu1);

    jMenu2.setText("Edit");
    jMenuBar1.add(jMenu2);

    jMenu3.setText("Help");

    jMenu5.setText("Tutorial");
    jMenu3.add(jMenu5);
    jMenu3.add(jSeparator1);

    jMenu4.setText("About the SERENADE");
    jMenu3.add(jMenu4);

    jMenuBar1.add(jMenu3);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 4, Short.MAX_VALUE))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents
    
//    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
//        //display the selected row data in the jtextfields
//        
//        //get the jlabel model 
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//                
//        // get the selected row index
//        int rIndex = jTable1.getSelectedRow();
//        
//        //display data 
//        
//        jTextFieldDOI.setText(model.getValueAt(rIndex, 1).toString());
//        jTextFieldName.setText(model.getValueAt(rIndex, 7).toString());
//        jTextFieldTotDose.setText(model.getValueAt(rIndex, 3).toString());
//        String injectionMode = jComboBoxInjection.getSelectedItem().toString();
//        String ecosystem = jComboBoxEcosystem.getSelectedItem().toString();
//        jTextFieldTotTime.setText(model.getValueAt(rIndex, 2).toString());
//        jTextFieldMeasTime.setText(model.getValueAt(rIndex, 6).toString());
//        jTextFieldPH.setText(model.getValueAt(rIndex, 8).toString());
//        jTextFieldTemp.setText(model.getValueAt(rIndex, 9).toString());
//        jTextFieldConductivity.setText(model.getValueAt(rIndex, 10).toString());
//        jTextFieldDissOxygen.setText(model.getValueAt(rIndex, 11).toString());
//        jTextFieldWatORP.setText(model.getValueAt(rIndex, 12).toString());
//        jTextFieldSEDORP.setText(model.getValueAt(rIndex, 13).toString());
//        jTextFieldWatConcentration.setText(model.getValueAt(rIndex, 14).toString());
//        jTextFieldSedConcentration.setText(model.getValueAt(rIndex, 15).toString());
//        jTextFieldDissConcentration.setText(model.getValueAt(rIndex, 16).toString());
//        jTextFieldTBARS.setText(model.getValueAt(rIndex, 17).toString());
//        jTextFieldTAOC.setText(model.getValueAt(rIndex, 18).toString());
//        jTextFieldAlgae.setText(model.getValueAt(rIndex, 19).toString());
//        jTextFieldBacteria.setText(model.getValueAt(rIndex, 20).toString());
//               
//    }
    
    private void jButtonClearCheckboxesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearCheckboxesActionPerformed
        jLabelTap.setVisible(true);
        jTextFieldSearch.setVisible(true);
        jLabelLowerB.setVisible(true);
        jTextFieldLowerB.setVisible(true);
        jLabelHigherB.setVisible(false);
        jTextFieldHigherB.setVisible(true);
        // remove text from all jTextfields
        jComboBoxFields.setSelectedIndex(0);
        jComboBoxMT.setSelectedIndex(0);
        
        //clear the JTable first
       jTable1.setModel(new DefaultTableModel(null, new Object[]{"ID", "DOI", "Nanoparticle", "Total dose", "Injection mode", "Ecosystem", "Total time", "Measure time", "PH", "Temperature", "Conductivity", "Dissolved oxygen", "ORP water", "ORP sediment", "Concentration water", "Concentration sediment", "Dissolved concentration", "TBARS", "TAOC", "Algae", "Bacteria"}));
        //reafficher le bouton  search
        jButtonValidateSearch.setVisible(true);
        
    }//GEN-LAST:event_jButtonClearCheckboxesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonValidateSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidateSearchActionPerformed
        
        //int measureTime = (Integer) jComboBoxMT.getSelectedItem();
        //int mt = Integer.parseInt(measureTime );
        
        
        //déclaration et initialisation de LB et HB
        int measureTime = jComboBoxMT.getSelectedIndex();
        double LB = 0.0, HB = 0.0;
        LB = Float.parseFloat(jTextFieldLowerB.getText());
        HB = Float.parseFloat(jTextFieldHigherB.getText());
        
        //
        
        String valToSearch = jTextFieldSearch.getText();
        
        // déclaration et initialisation de mes 3 variables de 
        String cond ="";
        String cond1 ="";
        String cond2 ="";
        
        //délcare une varable selection our renvoyer le combobox fields
       String selectedField = (String) jComboBoxFields.getSelectedItem();
        
       switch (selectedField) {
        case ", doi":
            cond = "lower(doi) like lower('%"+valToSearch+"%')";
            break;
        case ", Total_time":
            cond = "Total_time BETWEEN ("+LB+","+HB+")";
            break;
        case ", Total_dose":
            cond = "Total_dose BETWEEN ("+LB+","+HB+")";
            break;
        case ", Ecosystem":
            cond = "lower(Ecosystem) like lower('%"+valToSearch+"%')";
            break;
        case ", Injection_mode":
            cond = "lower(Injection_mode) like lower('%"+valToSearch+"%')";
            break;
        case ", Nanoparticle":
            cond = "lower(Nanoparticle) like lower('%"+valToSearch+"%')";
            break;
        case ", Measure_time":
            cond = "Measure_time BETWEEN ("+LB+","+HB+")";
            break;
        case ", PH":
            cond = "PH BETWEEN ("+LB+","+HB+")";
            break;
        case ", Temperature":
            cond = "Temperature BETWEEN ("+LB+","+HB+")";
            break;
        case ", Conductivity":
            cond = "Conductivity BETWEEN ("+LB+","+HB+")";
            break;
        case ", Dissolved_oxygen":
            cond = "Dissolved_oxygen BETWEEN ("+LB+","+HB+")";
            break;
        case ", ORP_water":
            cond = "ORP_water BETWEEN ("+LB+","+HB+")";
            break;
        case ", ORP_sediment":
            cond = "ORP_sediment BETWEEN ("+LB+","+HB+")";
            break;
        case ", Concentration_water":
            cond = "Concentration_water BETWEEN ("+LB+","+HB+")";
            break;
        case ", Dissolved_concentration":
            cond = "Dissolved_concentration BETWEEN ("+LB+","+HB+")";
            break;
        case ", Concentration_sediment":
            cond = "Concentration_sediment BETWEEN ("+LB+","+HB+")";
            break;
        case ", TBARS":
            cond = "TBARS BETWEEN ("+LB+","+HB+")";
            break;
        case ", TAOC":
            cond = "TAOC BETWEEN ("+LB+","+HB+")";
            break;
        case ", Algae":
            cond = "Algae BETWEEN ("+LB+","+HB+")";
            break;
        case ", Bacteria":
            cond = "Bacteria BETWEEN ("+LB+","+HB+")";
            break;
        } 
        
        
                
        
        
        
        
        
        
        
        
        
//        String attributs ="";
//        
//
//                if (jCheckBoxDOI.isSelected()) {
//                attributs = attributs + ", DOI";
//                }
//                if(jCheckBoxTotalTime.isSelected()) {
//                attributs = attributs + ", Total_time";    
//                }
//                if(jCheckBoxtOTALdOSE.isSelected()) {
//                attributs = attributs + ", Total_dose";    
//                }
//                if(jCheckBoxEcosystem.isSelected()) {
//                attributs = attributs + ", Ecosystem";    
//                }
//                if (jCheckBoxInjectionMode.isSelected()) {
//                attributs = attributs + ", Injection_mode";
//                }
//                if(jCheckBoxName.isSelected()) {
//                attributs = attributs + ", Nanoparticle";    
//                }
//                if(jCheckBoxMeasureTime.isSelected()) {
//                attributs = attributs + ", Measure_time";    
//                }
//                if(jCheckBoxPH.isSelected()) {
//                attributs = attributs + ", PH" ;  
//                }
//                if (jCheckBoxTemp.isSelected()) {
//                attributs = attributs + ", Temperature";
//                }
//                if(jCheckBoxConductivity.isSelected()) {
//                attributs = attributs + ", Conductivity";    
//                }
//                if(jCheckBoxDissOxy.isSelected()) {
//                attributs = attributs + ", Dissolved_oxygen";    
//                }
//                //if(jCheckBoxDissOrgCarb.isSelected()) {
//                //attributs = attributs ;    
//                //}
//                if(jCheckBoxORPWat.isSelected()) {
//                attributs = attributs + ", ORP_water";    
//                }
//                if(jCheckBoxORPSed.isSelected()) {
//                attributs = attributs + ", ORP_sediment";   
//                }
//               // if(jCheckBoxSpeciationWater.isSelected()) {
//                //attributs = attributs + "";    
//                //}
//                if(jCheckBoxConcentrationWater.isSelected()) {
//                attributs = attributs + ", Concentration_water";   
//                }
//                if(jCheckBoxDissConcentration.isSelected()) {
//                attributs = attributs + ", Dissolved_concentration" ;    
//                }
//                //if(jCheckBoxSize.isSelected()) {
//                //attributs = attributs + "";    
//                //}
//                //if(jCheckBoxSpeciationSed.isSelected()) {
//                //attributs = attributs + "";    
//               // }
//                if(jCheckBoxConcentartionSed.isSelected()) {
//                attributs = attributs + ", Concentration_sediment"; 
//                }
//                if(jCheckBoxTABARS.isSelected()) {
//                attributs = attributs + ", TBARS";   
//                }
//                if(jCheckBoxTAOC.isSelected()) {
//                attributs = attributs + ", TAOC";    
//                }
//                if(jCheckBoxaLGAE.isSelected()) {
//                attributs = attributs + ", Algae";    
//                }
//                if(jCheckBoxbACTERIA.isSelected()) {
//                attributs = attributs + ", Bacteria";    
//                }
//                
//                
//                System.out.println(attributs);
        
        
        
        
//String Search3Query = "SELECT e.IDE, s.IDS, m.IDM" + attributs + " FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS Order by Measure_time";
//String Search4Query = "SELECT e.IDE, s.IDS, m.IDM" + attributs + " FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND Measure_time= " + measureTime +" Order by Measure_time";
//String Search5Query = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND (doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria) LIKE '%"+valToSearch+"%' Order by Measure_time";
        	        
        
String SearchQuery = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS Order by Measure_time";
String Search2Query = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND Measure_time= " + measureTime +" Order by Measure_time";
String selection = (String) jComboBoxFields.getSelectedItem();
String Search3Query = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND " +selection+ "=? AND Measure_time= " + measureTime +" Order by Measure_time";
String Search4Query = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND " +selection+ "=? Order by Measure_time";
        		
                PreparedStatement stGetSearch;
		
                ResultSet searchResult;
		       
		try {
                    

                    
                     if(jComboBoxFields.getSelectedItem() == "All fields" &&  jComboBoxMT.getSelectedItem() == "All measure times" )
                    {
                        stGetSearch = my_connection.createConnection().prepareStatement(SearchQuery);
                        searchResult = stGetSearch.executeQuery();
                        
                         java.sql.ResultSetMetaData rsmetadata = searchResult.getMetaData();
                        
                        int colums = rsmetadata.getColumnCount();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
                        
                        Vector columns_name = new Vector();
                        
                        Vector data_rows = new Vector();
                        
                        for(int i=1; i < colums; i++){
                            columns_name.addElement(rsmetadata.getColumnName(i));
                        }
                        tableModel.setColumnIdentifiers(columns_name);
            
                        while (searchResult.next()) {
                            
                            data_rows = new Vector();
                            for(int j=1; j < colums; j++){
                                data_rows.addElement(searchResult.getString(j));
                            }
                            tableModel.addRow(data_rows);
                            
                        }
                        
                        jTable1.setModel(tableModel);
                            
                          
                        jButtonValidateSearch.setVisible(false);
                    }
                      if(jComboBoxFields.getSelectedItem() == "All fields" &&  jComboBoxMT.getSelectedIndex() == measureTime )
                    {
                        stGetSearch = my_connection.createConnection().prepareStatement(Search2Query);
                        searchResult = stGetSearch.executeQuery();
                        
                        
                         java.sql.ResultSetMetaData rsmetadata = searchResult.getMetaData();
                        
                        int colums = rsmetadata.getColumnCount();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
                        
                        Vector columns_name = new Vector();
                        
                        Vector data_rows = new Vector();
                        
                        for(int i=1; i < colums; i++){
                            columns_name.addElement(rsmetadata.getColumnName(i));
                        }
                        tableModel.setColumnIdentifiers(columns_name);
            
                        
                        while (searchResult.next()) {
                            
                            data_rows = new Vector();
                            for(int j=1; j < colums; j++){
                                data_rows.addElement(searchResult.getString(j));
                            }
                            tableModel.addRow(data_rows);
                            
                        }
                        
                        jTable1.setModel(tableModel);
                            
                        
                        jButtonValidateSearch.setVisible(false);
                    }
                     
                     
                          if( jComboBoxMT.getSelectedIndex() == measureTime )
                    {
                        
                       
                        stGetSearch = my_connection.createConnection().prepareStatement(Search3Query);
                        
                        
                        stGetSearch.setString(1, jTextFieldSearch.getText());
                        
                        searchResult = stGetSearch.executeQuery();
                        
                         java.sql.ResultSetMetaData rsmetadata = searchResult.getMetaData();
                        
                        int colums = rsmetadata.getColumnCount();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
                        
                        Vector columns_name = new Vector();
                        
                        Vector data_rows = new Vector();
                        
                        for(int i=1; i < colums; i++){
                            columns_name.addElement(rsmetadata.getColumnName(i));
                        }
                        tableModel.setColumnIdentifiers(columns_name);
            
                        
                        while (searchResult.next()) {
                            
                            data_rows = new Vector();
                            for(int j=1; j < colums; j++){
                                data_rows.addElement(searchResult.getString(j));
                            }
                            tableModel.addRow(data_rows);
                            
                        }
                        
                        jTable1.setModel(tableModel);
                            
                        
                        jButtonValidateSearch.setVisible(false);
                    }
                       if( jComboBoxMT.getSelectedItem() == "All measure times" )
                    {
                        
                       
                        stGetSearch = my_connection.createConnection().prepareStatement(Search4Query);
                        
                        
                        stGetSearch.setString(1, jTextFieldSearch.getText());
                        
                        searchResult = stGetSearch.executeQuery();
                        
                         java.sql.ResultSetMetaData rsmetadata = searchResult.getMetaData();
                        
                        int colums = rsmetadata.getColumnCount();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
                        
                        Vector columns_name = new Vector();
                        
                        Vector data_rows = new Vector();
                        
                        for(int i=1; i < colums; i++){
                            columns_name.addElement(rsmetadata.getColumnName(i));
                        }
                        tableModel.setColumnIdentifiers(columns_name);
            
                        
                        while (searchResult.next()) {
                            
                            data_rows = new Vector();
                            for(int j=1; j < colums; j++){
                                data_rows.addElement(searchResult.getString(j));
                            }
                            tableModel.addRow(data_rows);
                            
                        }
                        
                        jTable1.setModel(tableModel);
                            
                        
                        jButtonValidateSearch.setVisible(false);
                    }                   
                    } catch (Exception e) {
			Logger.getLogger(MESOCOSM.class.getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(rootPane, "Sorry, no results were found matching your criteria. ", "Searc Mesocosm", JOptionPane.INFORMATION_MESSAGE);
			
		}
                
                 
        
        
    }//GEN-LAST:event_jButtonValidateSearchActionPerformed

    private void jComboBoxFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFieldsActionPerformed
        //String selectedValue = (String) jComboBoxFields.getSelectedItem();
        
        if (jComboBoxFields.getSelectedItem().toString().contains("doi") || jComboBoxFields.getSelectedItem().toString().contains("Injection_mode")
                ||  jComboBoxFields.getSelectedItem().toString().contains("Ecoystem")|| jComboBoxFields.getSelectedItem().toString().contains("Nanoparticle")) 
            {           jLabelLowerB.setVisible(false);
                        jTextFieldLowerB.setVisible(false);
                        jLabelHigherB.setVisible(false);
                        jTextFieldHigherB.setVisible(false); 
                        jLabelTap.setVisible(true);
                        jTextFieldSearch.setVisible(true);
            }
            else if (jComboBoxFields.getSelectedItem().toString().contains("Total_time") || jComboBoxFields.getSelectedItem().toString().contains("Total_dose")
                || jComboBoxFields.getSelectedItem().toString().contains("PH")|| jComboBoxFields.getSelectedItem().toString().contains("Temperature") 
                || jComboBoxFields.getSelectedItem().toString().contains("Conductivity") || jComboBoxFields.getSelectedItem().toString().contains("Dissolved_oxygen")
                || jComboBoxFields.getSelectedItem().toString().contains("ORP_water")|| jComboBoxFields.getSelectedItem().toString().contains("ORP_sediment")
                || jComboBoxFields.getSelectedItem().toString().contains("Concentration_water") || jComboBoxFields.getSelectedItem().toString().contains("Concentration_sediment")
                || jComboBoxFields.getSelectedItem().toString().contains("Dissolved_concentration")|| jComboBoxFields.getSelectedItem().toString().contains("TBARS")
                || jComboBoxFields.getSelectedItem().toString().contains("TAOC") || jComboBoxFields.getSelectedItem().toString().contains("Algae")|| jComboBoxFields.getSelectedItem().toString().contains("Bacteria")) 
            {           jLabelTap.setVisible(false);
                        jTextFieldSearch.setVisible(false); 
                        jLabelLowerB.setVisible(true);
                        jTextFieldLowerB.setVisible(true);
                        jLabelHigherB.setVisible(true);
                        jTextFieldHigherB.setVisible(true);
            }
    }//GEN-LAST:event_jComboBoxFieldsActionPerformed

    private void jTextFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageMesocosmsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonClearCheckboxes;
    private javax.swing.JButton jButtonExportResults;
    private javax.swing.JButton jButtonPrintResults;
    private javax.swing.JButton jButtonValidateSearch;
    private javax.swing.JComboBox<String> jComboBoxFields;
    private javax.swing.JComboBox<String> jComboBoxMT;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabelHigherB;
    private javax.swing.JLabel jLabelLowerB;
    private javax.swing.JLabel jLabelTap;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldHigherB;
    private javax.swing.JTextField jTextFieldLowerB;
    private javax.swing.JTextField jTextFieldSearch;
    // End of variables declaration//GEN-END:variables
}
