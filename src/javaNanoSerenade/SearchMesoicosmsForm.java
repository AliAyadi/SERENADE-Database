/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaNanoSerenade;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author aliay
 */
public class SearchMesoicosmsForm extends javax.swing.JFrame {
    MY_CONNECTION my_connection = new MY_CONNECTION();
    MESOCOSM mesocosm = new MESOCOSM();
    /**
     * Creates new form ManageRoomsForm
     */
    public SearchMesoicosmsForm() {
        initComponents();
        
         //ajout d une icone serende pour la page
          this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/lloogg_ser.png")).getImage());
        
        //populate the jtable
       // mesocosm.fillMesocosmJTable(jTable1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jCheckBoxDOI = new javax.swing.JCheckBox();
        jCheckBoxtOTALdOSE = new javax.swing.JCheckBox();
        jCheckBoxTotalTime = new javax.swing.JCheckBox();
        jCheckBoxEcosystem = new javax.swing.JCheckBox();
        jCheckBoxInjectionMode = new javax.swing.JCheckBox();
        jCheckBoxName = new javax.swing.JCheckBox();
        jCheckBoxMeasureTime = new javax.swing.JCheckBox();
        jCheckBoxSpeciationWater = new javax.swing.JCheckBox();
        jCheckBoxConcentrationWater = new javax.swing.JCheckBox();
        jCheckBoxDissConcentration = new javax.swing.JCheckBox();
        jCheckBoxSize = new javax.swing.JCheckBox();
        jCheckBoxSpeciationSed = new javax.swing.JCheckBox();
        jCheckBoxConcentartionSed = new javax.swing.JCheckBox();
        jCheckBoxTABARS = new javax.swing.JCheckBox();
        jCheckBoxTAOC = new javax.swing.JCheckBox();
        jCheckBoxaLGAE = new javax.swing.JCheckBox();
        jCheckBoxbACTERIA = new javax.swing.JCheckBox();
        jCheckBoxPH = new javax.swing.JCheckBox();
        jCheckBoxTemp = new javax.swing.JCheckBox();
        jCheckBoxConductivity = new javax.swing.JCheckBox();
        jCheckBoxDissOxy = new javax.swing.JCheckBox();
        jCheckBoxDissOrgCarb = new javax.swing.JCheckBox();
        jCheckBoxORPWat = new javax.swing.JCheckBox();
        jCheckBoxORPSed = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButtonClearCheckboxes = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButtonValidateSearch = new javax.swing.JButton();
        jButtonPrintResults = new javax.swing.JButton();
        jButtonExportResults = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxFields = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jComboBoxMT = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu4 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advanced Search Mesocosms (SERENADE)");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel12.setBackground(new java.awt.Color(204, 204, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Selected fields", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("General fields");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Mesocosm instance fields");

        jLabel4.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Environmental End Points fields");

        jLabel5.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Exposure End Points fields");

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Hazard End Points fields");

        jLabel11.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("-water-");

        jLabel13.setFont(new java.awt.Font("Tahoma", 2, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("-sediment-");

        jCheckBoxDOI.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxDOI.setText("DOI");

        jCheckBoxtOTALdOSE.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxtOTALdOSE.setText("Total dose");

        jCheckBoxTotalTime.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxTotalTime.setText("Total time ");

        jCheckBoxEcosystem.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxEcosystem.setText("Type of ecosystem");

        jCheckBoxInjectionMode.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxInjectionMode.setText("Injection mode");

        jCheckBoxName.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxName.setText("Name ");

        jCheckBoxMeasureTime.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxMeasureTime.setText("Measure time");

        jCheckBoxSpeciationWater.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxSpeciationWater.setText("Speciation ");

        jCheckBoxConcentrationWater.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxConcentrationWater.setText("Concentration ");

        jCheckBoxDissConcentration.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxDissConcentration.setText("Dissolved Concentration ");

        jCheckBoxSize.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxSize.setText("Size / Aggregation state ");

        jCheckBoxSpeciationSed.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxSpeciationSed.setText("Speciation ");

        jCheckBoxConcentartionSed.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxConcentartionSed.setText("Concentration ");

        jCheckBoxTABARS.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxTABARS.setText("TBARS");

        jCheckBoxTAOC.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxTAOC.setText("TAOC");

        jCheckBoxaLGAE.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxaLGAE.setText("Algae");

        jCheckBoxbACTERIA.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxbACTERIA.setText("Bacteria");

        jCheckBoxPH.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxPH.setText("PH");

        jCheckBoxTemp.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxTemp.setText("Temperature ");

        jCheckBoxConductivity.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxConductivity.setText("Conductivity");

        jCheckBoxDissOxy.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxDissOxy.setText("Dissolved Oxygen");

        jCheckBoxDissOrgCarb.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxDissOrgCarb.setText("Dissolved Organic Carbon");

        jCheckBoxORPWat.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxORPWat.setText("Oxidation-Reduction Potential (wat.) ");

        jCheckBoxORPSed.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jCheckBoxORPSed.setText("Oxidation-Reduction Potential (sed.)  ");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jCheckBoxMeasureTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jCheckBoxDOI)
                            .addComponent(jCheckBoxtOTALdOSE)
                            .addComponent(jCheckBoxTotalTime)
                            .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jCheckBoxEcosystem)
                                .addComponent(jCheckBoxInjectionMode))
                            .addComponent(jCheckBoxName)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jCheckBoxPH)
                            .addComponent(jCheckBoxTemp)
                            .addComponent(jCheckBoxConductivity)
                            .addComponent(jCheckBoxDissOxy)
                            .addComponent(jCheckBoxDissOrgCarb)
                            .addComponent(jCheckBoxORPWat)
                            .addComponent(jCheckBoxORPSed))
                        .addGap(134, 134, 134)))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxSpeciationSed)
                            .addComponent(jCheckBoxConcentartionSed)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel13)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jCheckBoxSpeciationWater)
                            .addComponent(jCheckBoxConcentrationWater)
                            .addComponent(jCheckBoxDissConcentration)
                            .addComponent(jCheckBoxSize)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel11)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxTABARS)
                            .addComponent(jCheckBoxTAOC)
                            .addComponent(jCheckBoxaLGAE)
                            .addComponent(jCheckBoxbACTERIA)
                            .addComponent(jLabel8))
                        .addGap(15, 15, 15))))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jCheckBoxDOI)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxtOTALdOSE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxTotalTime)
                                .addGap(1, 1, 1)
                                .addComponent(jCheckBoxEcosystem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxInjectionMode)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxMeasureTime))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jCheckBoxTABARS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxTAOC)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxaLGAE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxbACTERIA))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxSpeciationWater)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxConcentrationWater)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxDissConcentration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxSize)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxSpeciationSed)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBoxConcentartionSed))))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBoxPH)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxTemp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxConductivity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDissOxy)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxDissOrgCarb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxORPWat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxORPSed)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DOI", "Nanoparticle", "Total dose", "Injection mode", "Ecosystem", "Total time", "Measure time", "PH", "Temperature", "Conductivity", "Dissolved oxygen", "ORP water", "ORP sediment", "Concentration water", "Concentration sediment", "Dissolved concentration", "TBARS", "TAOC", "Algae", "Bacteria"
            }
        )
        //make the jtable cell not editable
        {public boolean isCellEditable(int row, int column){return false;}}
    );
    jTable1.setGridColor(new java.awt.Color(204, 255, 0));

    jTable1.setSelectionBackground(new java.awt.Color(0, 153, 0));

    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            //jTable1MouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTable1);

    jButtonClearCheckboxes.setBackground(new java.awt.Color(204, 204, 204));
    jButtonClearCheckboxes.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
    jButtonClearCheckboxes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/reset_button.png"))); // NOI18N
    jButtonClearCheckboxes.setBorderPainted(false);
    jButtonClearCheckboxes.setContentAreaFilled(false);
    jButtonClearCheckboxes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButtonClearCheckboxes.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonClearCheckboxesActionPerformed(evt);
        }
    });

    jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/exit_button.png"))); // NOI18N
    jButton1.setBorderPainted(false);
    jButton1.setContentAreaFilled(false);
    jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton1.setDefaultCapable(false);
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButtonValidateSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/search_button.png"))); // NOI18N
    jButtonValidateSearch.setBorderPainted(false);
    jButtonValidateSearch.setContentAreaFilled(false);
    jButtonValidateSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButtonValidateSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonValidateSearchActionPerformed(evt);
        }
    });

    jButtonPrintResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/print_button_1.png"))); // NOI18N
    jButtonPrintResults.setBorderPainted(false);
    jButtonPrintResults.setContentAreaFilled(false);
    jButtonPrintResults.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

    jButtonExportResults.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaNanoSerenade/image/EXP8button.png"))); // NOI18N
    jButtonExportResults.setBorderPainted(false);
    jButtonExportResults.setContentAreaFilled(false);
    jButtonExportResults.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

    jPanel13.setBackground(new java.awt.Color(204, 204, 204));
    jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.MatteBorder(null), "Search fields", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

    jLabel10.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabel10.setForeground(new java.awt.Color(102, 102, 102));
    jLabel10.setText("Field: ");

    jComboBoxFields.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All fields", "Selected fields" }));

    jLabel14.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabel14.setForeground(new java.awt.Color(102, 102, 102));
    jLabel14.setText("at ");

    jComboBoxMT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All measure times", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

    jLabel15.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
    jLabel15.setForeground(new java.awt.Color(102, 102, 102));
    jLabel15.setText("Measure time: ");

    javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
    jPanel13.setLayout(jPanel13Layout);
    jPanel13Layout.setHorizontalGroup(
        jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel13Layout.createSequentialGroup()
            .addGap(52, 52, 52)
            .addComponent(jLabel10)
            .addGap(13, 13, 13)
            .addComponent(jComboBoxFields, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(25, 25, 25)
            .addComponent(jLabel14)
            .addGap(25, 25, 25)
            .addComponent(jLabel15)
            .addGap(13, 13, 13)
            .addComponent(jComboBoxMT, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(52, 52, 52))
    );
    jPanel13Layout.setVerticalGroup(
        jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel13Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel10)
                .addComponent(jComboBoxFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jComboBoxMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(328, 328, 328)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jButtonValidateSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonClearCheckboxes, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(127, 127, 127)
                            .addComponent(jButtonExportResults, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(137, 137, 137)
                            .addComponent(jButtonPrintResults, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(125, 125, 125)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(11, 11, 11)
            .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jButtonClearCheckboxes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonExportResults)
                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jButtonValidateSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonPrintResults, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(96, Short.MAX_VALUE))
    );

    jMenu1.setText("File");
    jMenuBar1.add(jMenu1);

    jMenu2.setText("Edit");
    jMenuBar1.add(jMenu2);

    jMenu3.setText("Help");

    jMenu5.setText("Tutorial");
    jMenu3.add(jMenu5);
    jMenu3.add(jSeparator1);

    jMenu4.setText("About the SERENADE");
    jMenu3.add(jMenu4);

    jMenuBar1.add(jMenu3);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    pack();
    }// </editor-fold>                        
    
//    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {                                     
//        //display the selected row data in the jtextfields
//        
//        //get the jlabel model 
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//                
//        // get the selected row index
//        int rIndex = jTable1.getSelectedRow();
//        
//        //display data 
//        
//        jTextFieldDOI.setText(model.getValueAt(rIndex, 1).toString());
//        jTextFieldName.setText(model.getValueAt(rIndex, 7).toString());
//        jTextFieldTotDose.setText(model.getValueAt(rIndex, 3).toString());
//        String injectionMode = jComboBoxInjection.getSelectedItem().toString();
//        String ecosystem = jComboBoxEcosystem.getSelectedItem().toString();
//        jTextFieldTotTime.setText(model.getValueAt(rIndex, 2).toString());
//        jTextFieldMeasTime.setText(model.getValueAt(rIndex, 6).toString());
//        jTextFieldPH.setText(model.getValueAt(rIndex, 8).toString());
//        jTextFieldTemp.setText(model.getValueAt(rIndex, 9).toString());
//        jTextFieldConductivity.setText(model.getValueAt(rIndex, 10).toString());
//        jTextFieldDissOxygen.setText(model.getValueAt(rIndex, 11).toString());
//        jTextFieldWatORP.setText(model.getValueAt(rIndex, 12).toString());
//        jTextFieldSEDORP.setText(model.getValueAt(rIndex, 13).toString());
//        jTextFieldWatConcentration.setText(model.getValueAt(rIndex, 14).toString());
//        jTextFieldSedConcentration.setText(model.getValueAt(rIndex, 15).toString());
//        jTextFieldDissConcentration.setText(model.getValueAt(rIndex, 16).toString());
//        jTextFieldTBARS.setText(model.getValueAt(rIndex, 17).toString());
//        jTextFieldTAOC.setText(model.getValueAt(rIndex, 18).toString());
//        jTextFieldAlgae.setText(model.getValueAt(rIndex, 19).toString());
//        jTextFieldBacteria.setText(model.getValueAt(rIndex, 20).toString());
//               
//    }
    
    private void jButtonClearCheckboxesActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // remove text from all jTextfields
        jComboBoxFields.setSelectedIndex(0);
        jComboBoxMT.setSelectedIndex(0);
        jCheckBoxDOI.setSelected(false);
        jCheckBoxtOTALdOSE.setSelected(false);
        jCheckBoxTotalTime.setSelected(false);
        jCheckBoxEcosystem.setSelected(false);
        jCheckBoxInjectionMode.setSelected(false);
        jCheckBoxName.setSelected(false);
        jCheckBoxMeasureTime.setSelected(false);
        jCheckBoxPH.setSelected(false);
        jCheckBoxTemp.setSelected(false);
        jCheckBoxConductivity.setSelected(false);
        jCheckBoxDissOxy.setSelected(false);
        jCheckBoxDissOrgCarb.setSelected(false);
        jCheckBoxORPWat.setSelected(false);
        jCheckBoxORPSed.setSelected(false);
        jCheckBoxSpeciationWater.setSelected(false);
        jCheckBoxConcentrationWater.setSelected(false);
        jCheckBoxDissConcentration.setSelected(false);
        jCheckBoxSize.setSelected(false);
        jCheckBoxSpeciationSed.setSelected(false);
        jCheckBoxConcentartionSed.setSelected(false);
        jCheckBoxTABARS.setSelected(false);
        jCheckBoxTAOC.setSelected(false);
        jCheckBoxaLGAE.setSelected(false);
        jCheckBoxbACTERIA.setSelected(false);
        //clear the JTable first
       jTable1.setModel(new DefaultTableModel(null, new Object[]{"ID", "DOI", "Nanoparticle", "Total dose", "Injection mode", "Ecosystem", "Total time", "Measure time", "PH", "Temperature", "Conductivity", "Dissolved oxygen", "ORP water", "ORP sediment", "Concentration water", "Concentration sediment", "Dissolved concentration", "TBARS", "TAOC", "Algae", "Bacteria"}));
        //reafficher le bouton  search
        jButtonValidateSearch.setVisible(true);
        
    }                                                      

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        System.exit(0);
    }                                        

    private void jButtonValidateSearchActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        //délcare une varable selection our renvoyer le combobox fields
       // String field = (String) jComboBoxFields.getSelectedItem();
        //int measureTime = (Integer) jComboBoxMT.getSelectedItem();
        //int mt = Integer.parseInt(measureTime );
        int measureTime = jComboBoxMT.getSelectedIndex();
        
        //
        
        
        
        
        
        
        String attributs ="";
        

                if (jCheckBoxDOI.isSelected()) {
                attributs = attributs + ", DOI";
                }
                if(jCheckBoxTotalTime.isSelected()) {
                attributs = attributs + ", Total_time";    
                }
                if(jCheckBoxtOTALdOSE.isSelected()) {
                attributs = attributs + ", Total_dose";    
                }
                if(jCheckBoxEcosystem.isSelected()) {
                attributs = attributs + ", Ecosystem";    
                }
                if (jCheckBoxInjectionMode.isSelected()) {
                attributs = attributs + ", Injection_mode";
                }
                if(jCheckBoxName.isSelected()) {
                attributs = attributs + ", Nanoparticle";    
                }
                if(jCheckBoxMeasureTime.isSelected()) {
                attributs = attributs + ", Measure_time";    
                }
                if(jCheckBoxPH.isSelected()) {
                attributs = attributs + ", PH" ;  
                }
                if (jCheckBoxTemp.isSelected()) {
                attributs = attributs + ", Temperature";
                }
                if(jCheckBoxConductivity.isSelected()) {
                attributs = attributs + ", Conductivity";    
                }
                if(jCheckBoxDissOxy.isSelected()) {
                attributs = attributs + ", Dissolved_oxygen";    
                }
                //if(jCheckBoxDissOrgCarb.isSelected()) {
                //attributs = attributs ;    
                //}
                if(jCheckBoxORPWat.isSelected()) {
                attributs = attributs + ", ORP_water";    
                }
                if(jCheckBoxORPSed.isSelected()) {
                attributs = attributs + ", ORP_sediment";   
                }
               // if(jCheckBoxSpeciationWater.isSelected()) {
                //attributs = attributs + "";    
                //}
                if(jCheckBoxConcentrationWater.isSelected()) {
                attributs = attributs + ", Concentration_water";   
                }
                if(jCheckBoxDissConcentration.isSelected()) {
                attributs = attributs + ", Dissolved_concentration" ;    
                }
                //if(jCheckBoxSize.isSelected()) {
                //attributs = attributs + "";    
                //}
                //if(jCheckBoxSpeciationSed.isSelected()) {
                //attributs = attributs + "";    
               // }
                if(jCheckBoxConcentartionSed.isSelected()) {
                attributs = attributs + ", Concentration_sediment"; 
                }
                if(jCheckBoxTABARS.isSelected()) {
                attributs = attributs + ", TBARS";   
                }
                if(jCheckBoxTAOC.isSelected()) {
                attributs = attributs + ", TAOC";    
                }
                if(jCheckBoxaLGAE.isSelected()) {
                attributs = attributs + ", Algae";    
                }
                if(jCheckBoxbACTERIA.isSelected()) {
                attributs = attributs + ", Bacteria";    
                }
                
                
                System.out.println(attributs);
        
//        switch (attributs) {
//        case ", DOI":
//            System.out.println("Monday");
//            break;
//        case ", Total_time":
//            System.out.println("Tuesday");
//            break;
//        case ", Total_dose":
//            System.out.println("Wednesday");
//            break;
//        case ", Ecosystem":
//            System.out.println("Thursday");
//            break;
//        case ", Injection_mode":
//            System.out.println("Wednesday");
//            break;
//        case ", Nanoparticle":
//            System.out.println("Wednesday");
//            break;
//        case ", Measure_time":
//            System.out.println("Friday");
//            break;
//        case ", PH":
//            System.out.println("Saturday");
//            break;
//        case ", Temperature":
//            System.out.println("Sunday");
//            break;
//        case ", Conductivity":
//            System.out.println("Sunday");
//            break;
//        case ", Dissolved_oxygen":
//            System.out.println("Sunday");
//            break;
//        case ", ORP_water":
//            System.out.println("Sunday");
//            break;
//        case ", ORP_sediment":
//            System.out.println("Sunday");
//            break;
//        case ", Concentration_water":
//            System.out.println("Sunday");
//            break;
//        case ", Dissolved_concentration":
//            System.out.println("Sunday");
//            break;
//        case ", Concentration_sediment":
//            System.out.println("Sunday");
//            break;
//        case ", TBARS":
//            System.out.println("Sunday");
//            break;
//        case ", TAOC":
//            System.out.println("Sunday");
//            break;
//        case ", Algae":
//            System.out.println("Sunday");
//            break;
//        case ", Bacteria":
//            System.out.println("Sunday");
//            break;
//        }
        
        
        
        
		String SearchQuery = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS Order by Measure_time";
        	String Search2Query = "SELECT e.IDE, s.IDS, m.IDM, doi, Total_time, Total_dose, Injection_mode, Ecosystem, Measure_time, Nanoparticle, PH, Temperature, Conductivity, Dissolved_oxygen, ORP_water, ORP_sediment, Concentration_water, Concentration_sediment, Dissolved_concentration, TBARS, TAOC, Algae, Bacteria FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND Measure_time= " + measureTime +" Order by Measure_time";
                String Search3Query = "SELECT e.IDE, s.IDS, m.IDM" + attributs + " FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS Order by Measure_time";
                String Search4Query = "SELECT e.IDE, s.IDS, m.IDM" + attributs + " FROM experiment e, sampling s, measure m WHERE e.IDE = s.IDE AND s.IDS = m.IDS AND Measure_time= " + measureTime +" Order by Measure_time";
        	
        	
                PreparedStatement stGetSearch;
		
                ResultSet searchResult;
		
		try {
                    
                     if(jComboBoxFields.getSelectedItem() == "All fields" &&  jComboBoxMT.getSelectedItem() == "All measure times" )
                    {
                        stGetSearch = my_connection.createConnection().prepareStatement(SearchQuery);
                        searchResult = stGetSearch.executeQuery();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
            
                        Object[] row;

                        while (searchResult.next()) {
                            
                            //mesocosm.fillMesocosmJTable(jTable1);
                            row = new Object[21];
                            row[0] = searchResult.getLong(1) + "_" + searchResult.getLong(2) + "_" + searchResult.getLong(3);
                            row[1] = searchResult.getString(4);
                            row[2] = searchResult.getInt(5);
                            row[3] = searchResult.getFloat(6);
                            row[4] = searchResult.getString(7);
                            row[5] = searchResult.getString(8);
                            row[6] = searchResult.getInt(9);
                            row[7] = searchResult.getString(10);
                            row[8] = searchResult.getFloat(11);
                            row[9] = searchResult.getFloat(12);
                            row[10] = searchResult.getFloat(13);
                            row[11] = searchResult.getFloat(14);
                            row[12] = searchResult.getFloat(15);
                            row[13] = searchResult.getFloat(16);
                            row[14] = searchResult.getFloat(17);
                            row[15] = searchResult.getFloat(18);
                            row[16] = searchResult.getFloat(19);
                            row[17] = searchResult.getFloat(20);
                            row[18] = searchResult.getFloat(21);
                            row[19] = searchResult.getFloat(22);
                            row[20] = searchResult.getFloat(23);

                            tableModel.addRow(row);
                            
                            
                        }
                        jButtonValidateSearch.setVisible(false);
                    }
                     else if(jComboBoxFields.getSelectedItem() == "All fields" &&  jComboBoxMT.getSelectedIndex() == measureTime )
                    {
                        stGetSearch = my_connection.createConnection().prepareStatement(Search2Query);
                        searchResult = stGetSearch.executeQuery();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
            
                        Object[] row;

                        while (searchResult.next()) {
                            
                            //mesocosm.fillMesocosmJTable(jTable1);
                            row = new Object[21];
                            row[0] = searchResult.getLong(1) + "_" + searchResult.getLong(2) + "_" + searchResult.getLong(3);
                            row[1] = searchResult.getString(4);
                            row[2] = searchResult.getInt(5);
                            row[3] = searchResult.getFloat(6);
                            row[4] = searchResult.getString(7);
                            row[5] = searchResult.getString(8);
                            row[6] = searchResult.getInt(9);
                            row[7] = searchResult.getString(10);
                            row[8] = searchResult.getFloat(11);
                            row[9] = searchResult.getFloat(12);
                            row[10] = searchResult.getFloat(13);
                            row[11] = searchResult.getFloat(14);
                            row[12] = searchResult.getFloat(15);
                            row[13] = searchResult.getFloat(16);
                            row[14] = searchResult.getFloat(17);
                            row[15] = searchResult.getFloat(18);
                            row[16] = searchResult.getFloat(19);
                            row[17] = searchResult.getFloat(20);
                            row[18] = searchResult.getFloat(21);
                            row[19] = searchResult.getFloat(22);
                            row[20] = searchResult.getFloat(23);

                            tableModel.addRow(row);
                            
                            
                        }
                        jButtonValidateSearch.setVisible(false);
                    }
                     else if(jComboBoxFields.getSelectedItem() == "Selected fields" &&  jComboBoxMT.getSelectedItem() == "All measure times")
                    {
                        stGetSearch = my_connection.createConnection().prepareStatement(Search3Query);
                        searchResult = stGetSearch.executeQuery();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
            
                        Object[] row;

                        while (searchResult.next()) {
                            
                            //mesocosm.fillMesocosmJTable(jTable1);
                            row = new Object[21];
                            row[0] = searchResult.getLong(1) + "_" + searchResult.getLong(2) + "_" + searchResult.getLong(3);
                            row[1] = searchResult.getString(4);
                            row[2] = searchResult.getInt(5);
                            row[3] = searchResult.getFloat(6);
                            row[4] = searchResult.getString(7);
                            row[5] = searchResult.getString(8);
                            row[6] = searchResult.getInt(9);
                            row[7] = searchResult.getString(10);
                            row[8] = searchResult.getFloat(11);
                            row[9] = searchResult.getFloat(12);
                            row[10] = searchResult.getFloat(13);
                            row[11] = searchResult.getFloat(14);
                            row[12] = searchResult.getFloat(15);
                            row[13] = searchResult.getFloat(16);
                            row[14] = searchResult.getFloat(17);
                            row[15] = searchResult.getFloat(18);
                            row[16] = searchResult.getFloat(19);
                            row[17] = searchResult.getFloat(20);
                            row[18] = searchResult.getFloat(21);
                            row[19] = searchResult.getFloat(22);
                            row[20] = searchResult.getFloat(23);

                            tableModel.addRow(row);
                            
                            
                        }
                        jButtonValidateSearch.setVisible(false);
                    }
                     else if(jComboBoxFields.getSelectedItem() == "Select fields" &&  jComboBoxMT.getSelectedIndex() == measureTime )
                    {
                        stGetSearch = my_connection.createConnection().prepareStatement(Search4Query);
                        searchResult = stGetSearch.executeQuery();
                        
                        
                        
                        DefaultTableModel tableModel = (DefaultTableModel)jTable1.getModel();
            
                        Object[] row;

                        while (searchResult.next()) {
                            
                            //mesocosm.fillMesocosmJTable(jTable1);
                            row = new Object[21];
                            row[0] = searchResult.getLong(1) + "_" + searchResult.getLong(2) + "_" + searchResult.getLong(3);
                            row[1] = searchResult.getString(4);
                            row[2] = searchResult.getInt(5);
                            row[3] = searchResult.getFloat(6);
                            row[4] = searchResult.getString(7);
                            row[5] = searchResult.getString(8);
                            row[6] = searchResult.getInt(9);
                            row[7] = searchResult.getString(10);
                            row[8] = searchResult.getFloat(11);
                            row[9] = searchResult.getFloat(12);
                            row[10] = searchResult.getFloat(13);
                            row[11] = searchResult.getFloat(14);
                            row[12] = searchResult.getFloat(15);
                            row[13] = searchResult.getFloat(16);
                            row[14] = searchResult.getFloat(17);
                            row[15] = searchResult.getFloat(18);
                            row[16] = searchResult.getFloat(19);
                            row[17] = searchResult.getFloat(20);
                            row[18] = searchResult.getFloat(21);
                            row[19] = searchResult.getFloat(22);
                            row[20] = searchResult.getFloat(23);

                            tableModel.addRow(row);
                            
                            
                        }
                        jButtonValidateSearch.setVisible(false);
                    }
                        
                    } catch (Exception e) {
			Logger.getLogger(MESOCOSM.class.getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(rootPane, "Mesocosm Not Deleted ", "Remove Mesocosm Error", JOptionPane.INFORMATION_MESSAGE);
			
		}
                
                 
        
        
    }                                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageMesocosmsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageMesocosmsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonClearCheckboxes;
    private javax.swing.JButton jButtonExportResults;
    private javax.swing.JButton jButtonPrintResults;
    private javax.swing.JButton jButtonValidateSearch;
    private javax.swing.JCheckBox jCheckBoxConcentartionSed;
    private javax.swing.JCheckBox jCheckBoxConcentrationWater;
    private javax.swing.JCheckBox jCheckBoxConductivity;
    private javax.swing.JCheckBox jCheckBoxDOI;
    private javax.swing.JCheckBox jCheckBoxDissConcentration;
    private javax.swing.JCheckBox jCheckBoxDissOrgCarb;
    private javax.swing.JCheckBox jCheckBoxDissOxy;
    private javax.swing.JCheckBox jCheckBoxEcosystem;
    private javax.swing.JCheckBox jCheckBoxInjectionMode;
    private javax.swing.JCheckBox jCheckBoxMeasureTime;
    private javax.swing.JCheckBox jCheckBoxName;
    private javax.swing.JCheckBox jCheckBoxORPSed;
    private javax.swing.JCheckBox jCheckBoxORPWat;
    private javax.swing.JCheckBox jCheckBoxPH;
    private javax.swing.JCheckBox jCheckBoxSize;
    private javax.swing.JCheckBox jCheckBoxSpeciationSed;
    private javax.swing.JCheckBox jCheckBoxSpeciationWater;
    private javax.swing.JCheckBox jCheckBoxTABARS;
    private javax.swing.JCheckBox jCheckBoxTAOC;
    private javax.swing.JCheckBox jCheckBoxTemp;
    private javax.swing.JCheckBox jCheckBoxTotalTime;
    private javax.swing.JCheckBox jCheckBoxaLGAE;
    private javax.swing.JCheckBox jCheckBoxbACTERIA;
    private javax.swing.JCheckBox jCheckBoxtOTALdOSE;
    private javax.swing.JComboBox<String> jComboBoxFields;
    private javax.swing.JComboBox<String> jComboBoxMT;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}
